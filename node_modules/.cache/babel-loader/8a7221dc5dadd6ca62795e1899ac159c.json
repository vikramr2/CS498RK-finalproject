{"ast":null,"code":"export default function checkConflict(addedClass, userClasses, allSchedules) {\n  var currClassesSchedule = filterClasses(userClasses, allSchedules);\n  var newClassesSchedule = filterClasses([addedClass], allSchedules);\n  console.log(newClassesSchedule);\n\n  for (let i = 0; i < currClassesSchedule.length; i++) {\n    for (let j = 0; j < newClassesSchedule.length; j++) {\n      if (!check(currClassesSchedule[i], newClassesSchedule[j])) {\n        var result = false;\n        console.log(currClassesSchedule[i].title);\n        console.log(newClassesSchedule[j].title);\n        var oldClass = currClassesSchedule[i].title;\n        var newClass = newClassesSchedule[j].title;\n        return {\n          result,\n          oldClass,\n          newClass\n        };\n      }\n    }\n  }\n\n  result = true;\n  oldClass = '';\n  newClass = '';\n  return {\n    result,\n    oldClass,\n    newClass\n  };\n}\n\nfunction filterClasses(userClasses, allSchedules) {\n  var currSchedules = allSchedules.filter(schedule => userClasses.includes(schedule.title));\n  return currSchedules;\n}\n\nfunction check(oldClass, newClass) {\n  var oldStartValue = parseInt(oldClass.startHour) * 100 + parseInt(oldClass.startMin);\n  var oldEndValue = parseInt(oldClass.endHour) * 100 + parseInt(oldClass.endMin);\n  var newStartValue = parseInt(newClass.startHour) * 100 + parseInt(newClass.startMin);\n  var newEndValue = parseInt(newClass.endHour) * 100 + parseInt(newClass.endMin);\n\n  if (oldClass.day !== newClass.day || oldStartValue >= newEndValue || oldEndValue <= newStartValue) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/vikram/Documents/School/CS498RK/finalproject/src/components/Scheduler/checkConflict.js"],"names":["checkConflict","addedClass","userClasses","allSchedules","currClassesSchedule","filterClasses","newClassesSchedule","console","log","i","length","j","check","result","title","oldClass","newClass","currSchedules","filter","schedule","includes","oldStartValue","parseInt","startHour","startMin","oldEndValue","endHour","endMin","newStartValue","newEndValue","day"],"mappings":"AAAA,eAAe,SAASA,aAAT,CAAuBC,UAAvB,EAAmCC,WAAnC,EAAgDC,YAAhD,EAA8D;AAC3E,MAAIC,mBAAmB,GAAGC,aAAa,CAACH,WAAD,EAAcC,YAAd,CAAvC;AACA,MAAIG,kBAAkB,GAAGD,aAAa,CAAC,CAACJ,UAAD,CAAD,EAAeE,YAAf,CAAtC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,mBAAmB,CAACM,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,kBAAkB,CAACI,MAAvC,EAA+CC,CAAC,EAAhD,EAAoD;AAClD,UAAI,CAACC,KAAK,CAACR,mBAAmB,CAACK,CAAD,CAApB,EAAyBH,kBAAkB,CAACK,CAAD,CAA3C,CAAV,EAA2D;AACzD,YAAIE,MAAM,GAAG,KAAb;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYJ,mBAAmB,CAACK,CAAD,CAAnB,CAAuBK,KAAnC;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAkB,CAACK,CAAD,CAAlB,CAAsBG,KAAlC;AACA,YAAIC,QAAQ,GAAGX,mBAAmB,CAACK,CAAD,CAAnB,CAAuBK,KAAtC;AACA,YAAIE,QAAQ,GAAGV,kBAAkB,CAACK,CAAD,CAAlB,CAAsBG,KAArC;AACA,eAAO;AACLD,UAAAA,MADK;AAELE,UAAAA,QAFK;AAGLC,UAAAA;AAHK,SAAP;AAKD;AACF;AACF;;AACDH,EAAAA,MAAM,GAAG,IAAT;AACAE,EAAAA,QAAQ,GAAG,EAAX;AACAC,EAAAA,QAAQ,GAAG,EAAX;AACA,SAAO;AACLH,IAAAA,MADK;AAELE,IAAAA,QAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASX,aAAT,CAAuBH,WAAvB,EAAoCC,YAApC,EAAkD;AAChD,MAAIc,aAAa,GAAGd,YAAY,CAACe,MAAb,CAAoBC,QAAQ,IAAIjB,WAAW,CAACkB,QAAZ,CAAqBD,QAAQ,CAACL,KAA9B,CAAhC,CAApB;AACA,SAAOG,aAAP;AACD;;AAED,SAASL,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AACjC,MAAIK,aAAa,GAAGC,QAAQ,CAACP,QAAQ,CAACQ,SAAV,CAAR,GAA+B,GAA/B,GAAqCD,QAAQ,CAACP,QAAQ,CAACS,QAAV,CAAjE;AACA,MAAIC,WAAW,GAAGH,QAAQ,CAACP,QAAQ,CAACW,OAAV,CAAR,GAA6B,GAA7B,GAAmCJ,QAAQ,CAACP,QAAQ,CAACY,MAAV,CAA7D;AACA,MAAIC,aAAa,GAAGN,QAAQ,CAACN,QAAQ,CAACO,SAAV,CAAR,GAA+B,GAA/B,GAAqCD,QAAQ,CAACN,QAAQ,CAACQ,QAAV,CAAjE;AACA,MAAIK,WAAW,GAAGP,QAAQ,CAACN,QAAQ,CAACU,OAAV,CAAR,GAA6B,GAA7B,GAAmCJ,QAAQ,CAACN,QAAQ,CAACW,MAAV,CAA7D;;AACA,MAAIZ,QAAQ,CAACe,GAAT,KAAiBd,QAAQ,CAACc,GAA1B,IAAiCT,aAAa,IAAIQ,WAAlD,IAAiEJ,WAAW,IAAIG,aAApF,EAAmG;AACjG,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD","sourcesContent":["export default function checkConflict(addedClass, userClasses, allSchedules) {\n  var currClassesSchedule = filterClasses(userClasses, allSchedules);\n  var newClassesSchedule = filterClasses([addedClass], allSchedules);\n  console.log(newClassesSchedule)\n  for (let i = 0; i < currClassesSchedule.length; i++) {\n    for (let j = 0; j < newClassesSchedule.length; j++) {\n      if (!check(currClassesSchedule[i], newClassesSchedule[j])) {\n        var result = false;\n        console.log(currClassesSchedule[i].title)\n        console.log(newClassesSchedule[j].title)\n        var oldClass = currClassesSchedule[i].title\n        var newClass = newClassesSchedule[j].title\n        return { \n          result, \n          oldClass,\n          newClass\n        };\n      }\n    }\n  }\n  result = true;\n  oldClass = ''\n  newClass = ''\n  return { \n    result, \n    oldClass,\n    newClass\n  };\n}\n\nfunction filterClasses(userClasses, allSchedules) {\n  var currSchedules = allSchedules.filter(schedule => userClasses.includes(schedule.title))\n  return currSchedules;\n}\n\nfunction check(oldClass, newClass) {\n  var oldStartValue = parseInt(oldClass.startHour) * 100 + parseInt(oldClass.startMin)\n  var oldEndValue = parseInt(oldClass.endHour) * 100 + parseInt(oldClass.endMin)\n  var newStartValue = parseInt(newClass.startHour) * 100 + parseInt(newClass.startMin)\n  var newEndValue = parseInt(newClass.endHour) * 100 + parseInt(newClass.endMin)\n  if (oldClass.day !== newClass.day || oldStartValue >= newEndValue || oldEndValue <= newStartValue) {\n    return true;\n  }\n  return false;\n}"]},"metadata":{},"sourceType":"module"}