{"ast":null,"code":"import moment from 'moment';\nconst currentDate = moment();\nlet date = currentDate.date();\n\nconst makeAppointment = (day, startHour, startMin, endHour, endMin) => {\n  if (moment().isoWeekday() === 7) {\n    const nextStartDate = moment().add(5, 'days').isoWeekday(day).set(\"hour\", startHour).set(\"minute\", startMin);\n    const nextEndDate = moment().add(5, 'days').isoWeekday(day).set(\"hour\", endHour).set(\"minute\", endMin);\n    return {\n      startDate: nextStartDate.toDate(),\n      endDate: nextEndDate.toDate()\n    };\n  } else {\n    const nextStartDate = moment().isoWeekday(day).set(\"hour\", startHour).set(\"minute\", startMin);\n    const nextEndDate = moment().isoWeekday(day).set(\"hour\", endHour).set(\"minute\", endMin);\n    return {\n      startDate: nextStartDate.toDate(),\n      endDate: nextEndDate.toDate()\n    };\n  }\n};\n\nexport default function mapSchedules(schedules) {\n  return schedules.map(_ref => {\n    let {\n      day,\n      startHour,\n      startMin,\n      endHour,\n      endMin,\n      ...restArgs\n    } = _ref;\n    const result = { ...makeAppointment(day, startHour, startMin, endHour, endMin),\n      ...restArgs\n    };\n    console.log(result);\n    date += 1;\n    if (date > 31) date = 1;\n    return result;\n  });\n}","map":{"version":3,"sources":["/Users/vikram/Documents/School/CS498RK/finalproject/src/components/Scheduler/appointments.js"],"names":["moment","currentDate","date","makeAppointment","day","startHour","startMin","endHour","endMin","isoWeekday","nextStartDate","add","set","nextEndDate","startDate","toDate","endDate","mapSchedules","schedules","map","restArgs","result","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,MAAMC,WAAW,GAAGD,MAAM,EAA1B;AACA,IAAIE,IAAI,GAAGD,WAAW,CAACC,IAAZ,EAAX;;AAEA,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,MAApC,KAA+C;AACrE,MAAIR,MAAM,GAAGS,UAAT,OAA0B,CAA9B,EAAiC;AAC/B,UAAMC,aAAa,GAAGV,MAAM,GAAGW,GAAT,CAAa,CAAb,EAAgB,MAAhB,EACrBF,UADqB,CACVL,GADU,EAErBQ,GAFqB,CAEjB,MAFiB,EAETP,SAFS,EAGrBO,GAHqB,CAGjB,QAHiB,EAGPN,QAHO,CAAtB;AAIA,UAAMO,WAAW,GAAGb,MAAM,GAAGW,GAAT,CAAa,CAAb,EAAgB,MAAhB,EACjBF,UADiB,CACNL,GADM,EAEjBQ,GAFiB,CAEb,MAFa,EAELL,OAFK,EAGjBK,GAHiB,CAGb,QAHa,EAGHJ,MAHG,CAApB;AAIA,WAAO;AACLM,MAAAA,SAAS,EAAEJ,aAAa,CAACK,MAAd,EADN;AAELC,MAAAA,OAAO,EAAEH,WAAW,CAACE,MAAZ;AAFJ,KAAP;AAID,GAbD,MAaO;AACL,UAAML,aAAa,GAAGV,MAAM,GAC3BS,UADqB,CACVL,GADU,EAErBQ,GAFqB,CAEjB,MAFiB,EAETP,SAFS,EAGrBO,GAHqB,CAGjB,QAHiB,EAGPN,QAHO,CAAtB;AAIA,UAAMO,WAAW,GAAGb,MAAM,GACvBS,UADiB,CACNL,GADM,EAEjBQ,GAFiB,CAEb,MAFa,EAELL,OAFK,EAGjBK,GAHiB,CAGb,QAHa,EAGHJ,MAHG,CAApB;AAIA,WAAO;AACLM,MAAAA,SAAS,EAAEJ,aAAa,CAACK,MAAd,EADN;AAELC,MAAAA,OAAO,EAAEH,WAAW,CAACE,MAAZ;AAFJ,KAAP;AAID;AAEF,CA7BD;;AA+BA,eAAe,SAASE,YAAT,CAAsBC,SAAtB,EAAiC;AAE9C,SAAOA,SAAS,CAACC,GAAV,CAAc,QAAiE;AAAA,QAAhE;AAAEf,MAAAA,GAAF;AAAOC,MAAAA,SAAP;AAAkBC,MAAAA,QAAlB;AAA4BC,MAAAA,OAA5B;AAAqCC,MAAAA,MAArC;AAA8C,SAAGY;AAAjD,KAAgE;AAEpF,UAAMC,MAAM,GAAG,EACb,GAAGlB,eAAe,CAACC,GAAD,EAAMC,SAAN,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,MAApC,CADL;AAEb,SAAGY;AAFU,KAAf;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAnB,IAAAA,IAAI,IAAI,CAAR;AACA,QAAIA,IAAI,GAAG,EAAX,EAAeA,IAAI,GAAG,CAAP;AACf,WAAOmB,MAAP;AACD,GAVM,CAAP;AAWD","sourcesContent":["import moment from 'moment';\n\nconst currentDate = moment();\nlet date = currentDate.date();\n\nconst makeAppointment = (day, startHour, startMin, endHour, endMin) => {\n  if (moment().isoWeekday() === 7) {\n    const nextStartDate = moment().add(5, 'days')\n    .isoWeekday(day)\n    .set(\"hour\", startHour)\n    .set(\"minute\", startMin)\n    const nextEndDate = moment().add(5, 'days')\n      .isoWeekday(day)\n      .set(\"hour\", endHour)\n      .set(\"minute\", endMin)\n    return {\n      startDate: nextStartDate.toDate(),\n      endDate: nextEndDate.toDate(),\n    };\n  } else {\n    const nextStartDate = moment()\n    .isoWeekday(day)\n    .set(\"hour\", startHour)\n    .set(\"minute\", startMin)\n    const nextEndDate = moment()\n      .isoWeekday(day)\n      .set(\"hour\", endHour)\n      .set(\"minute\", endMin)\n    return {\n      startDate: nextStartDate.toDate(),\n      endDate: nextEndDate.toDate(),\n    };\n  }\n  \n};\n\nexport default function mapSchedules(schedules) {\n\n  return schedules.map(({ day, startHour, startMin, endHour, endMin,  ...restArgs }) => {\n\n    const result = {\n      ...makeAppointment(day, startHour, startMin, endHour, endMin),\n      ...restArgs,\n    };\n    console.log(result)\n    date += 1;\n    if (date > 31) date = 1;\n    return result;\n  });\n}\n\n"]},"metadata":{},"sourceType":"module"}